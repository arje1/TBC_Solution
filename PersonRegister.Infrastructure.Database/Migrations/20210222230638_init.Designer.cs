// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonRegister.Infrastructure.Database;

namespace PersonRegister.Infrastructure.Database.Migrations
{
    [DbContext(typeof(PersonRegister_DbContext))]
    [Migration("20210222230638_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mtsketa"
                        });
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Pn")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1996, 2, 23, 3, 6, 37, 676, DateTimeKind.Local).AddTicks(3762),
                            CityId = 4,
                            FirstName = "Petre",
                            Gender = 2,
                            LastName = "Petriashvili",
                            Pn = "00000000000"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1994, 2, 23, 3, 6, 37, 677, DateTimeKind.Local).AddTicks(3592),
                            CityId = 1,
                            FirstName = "Pavle",
                            Gender = 2,
                            LastName = "Pavliashvili",
                            Pn = "11111111111"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1992, 2, 23, 3, 6, 37, 677, DateTimeKind.Local).AddTicks(3684),
                            CityId = 1,
                            FirstName = "Nino",
                            Gender = 1,
                            LastName = "Ninidze",
                            Pn = "22222222222"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2002, 2, 23, 3, 6, 37, 677, DateTimeKind.Local).AddTicks(3691),
                            CityId = 3,
                            FirstName = "Mariam",
                            Gender = 1,
                            LastName = "Mariamidze",
                            Pn = "33333333333"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2002, 2, 23, 3, 6, 37, 677, DateTimeKind.Local).AddTicks(3694),
                            CityId = 3,
                            FirstName = "Jumber",
                            Gender = 1,
                            LastName = "Tkabladze",
                            Pn = "44444444444"
                        });
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.PersonRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelatedPersonId");

                    b.ToTable("PersonRelations");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberType")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.Person", b =>
                {
                    b.HasOne("PersonRegister.Core.Domain.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.PersonRelation", b =>
                {
                    b.HasOne("PersonRegister.Core.Domain.Models.Person", "Person")
                        .WithMany("RelatedPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PersonRegister.Core.Domain.Models.Person", "RelatedPerson")
                        .WithMany()
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.Phone", b =>
                {
                    b.HasOne("PersonRegister.Core.Domain.Models.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("PersonRegister.Core.Domain.Models.Person", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("RelatedPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
